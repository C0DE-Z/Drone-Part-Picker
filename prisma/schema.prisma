// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}


enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  username      String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  
  // Profile information
  bio           String?
  location      String?
  website       String?
  github        String?
  twitter       String?
  
  // Drone build relations
  droneBuilds   DroneBuild[]
  customParts   CustomPart[]
  
  // Social features
  likes         Like[]
  comments      Comment[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  
  // Badge system
  userBadges    UserBadge[]
  
  // Report relations
  reports       Report[] @relation("UserReports")
  reportedBy    Report[] @relation("ReportedUser")
  adminReviews  Report[] @relation("AdminReviews")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  reporterId  String
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  // Polymorphic relation - can report builds, parts, comments, or users
  buildId     String?
  build       DroneBuild? @relation(fields: [buildId], references: [id], onDelete: Cascade)
  partId      String?
  part        CustomPart? @relation(fields: [partId], references: [id], onDelete: Cascade)
  commentId   String?
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reportedUserId String?
  reportedUser   User? @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  
  // Admin actions
  reviewedById String?
  reviewedBy   User?   @relation("AdminReviews", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewedAt   DateTime?
  adminNotes   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([reporterId])
  @@index([buildId])
  @@index([partId])
  @@index([commentId])
  @@index([reportedUserId])
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DroneBuild {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Metadata
  tags        Json?     // Array of tags stored as JSON like ["racing", "freestyle", "5inch"]
  category    String?   // "Racing", "Freestyle", "Cinematic", etc.
  
  // Component selections stored as JSON
  motor       Json?
  frame       Json?
  stack       Json?
  camera      Json?
  prop        Json?
  battery     Json?
  customWeights Json?
  
  // Performance data
  totalWeight           Float?
  thrustToWeightRatio   Float?
  estimatedTopSpeed     Int?
  estimatedFlightTime   Float?
  powerConsumption      Float?
  
  // Social features
  likes       Like[]
  comments    Comment[]
  reports     Report[]
  viewCount   Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([isPublic])
  @@index([category])
}

model CustomPart {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   
  specifications Json   
  isPublic    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 3D Model support
  modelFile   String?  // File path/URL to the 3D model file
  modelFormat String?  // File format (glb, gltf, obj, stl, etc.)
  modelSize   Int?     // File size in bytes (max 40MB = 41943040 bytes)
  
  likes       Like[]
  comments    Comment[]
  reports     Report[]
  viewCount   Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([isPublic])
  @@index([category])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Polymorphic relation - can like either builds or parts
  buildId   String?
  build     DroneBuild? @relation(fields: [buildId], references: [id], onDelete: Cascade)
  partId    String?
  part      CustomPart? @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, buildId])
  @@unique([userId, partId])
  @@index([buildId])
  @@index([partId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  buildId   String?
  build     DroneBuild? @relation(fields: [buildId], references: [id], onDelete: Cascade)
  partId    String?
  part      CustomPart? @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  reports   Report[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([buildId])
  @@index([partId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum BadgeType {
  ADMIN
  MODERATOR
  VERIFIED
  EARLY_USER
  TOP_CONTRIBUTOR
  DRONE_EXPERT
  CUSTOM
}

model Badge {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        BadgeType
  icon        String    // Emoji or icon identifier
  color       String    // Hex color code
  rarity      String    @default("common") // common, rare, epic, legendary
  isActive    Boolean   @default(true)
  
  // User badge assignments
  userBadges  UserBadge[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([type])
  @@index([isActive])
}

model UserBadge {
  id       String @id @default(cuid())
  userId   String
  badgeId  String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge    Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  // Badge assignment details
  awardedBy   String?  // User ID who awarded the badge (for admin-awarded badges)
  awardedAt   DateTime @default(now())
  reason      String?  // Reason for awarding the badge
  isVisible   Boolean  @default(true) // User can choose to hide badges
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}



